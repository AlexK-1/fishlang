*1
        HLT
TMP1,   0
PRLGP,  PRLG
EPLGP,  EPLG
N3,     7775    / -3
P2,     2       / 2
P4,     4       / 4
*10
SP1,    STACK-1 / Основной SP, после вызова функции
SP2,    STACK-1 / Старый SP, до вызова функции
TMP2,   0
TMP3,   0
N4,     7774    / -4
N1,     7777    / -1
P3,     3       / 3
*20
REGS,
*50
STACK,
/ Команды
MQA=     7501
MQL=     7421
DVI=     7407
*400
/ Стандартная функция printf
f01,    0
        TAD SP2
        TAD P6F
        DCA TMP2
        TAD I TMP2
        TAD N1
        DCA TMP2        / Указатель на строку с форматом
        TAD SP2
        TAD P10
        DCA TMP1      / Указатель на аргументы для вставки
PRTFL,  TAD I TMP2    / Цикл чтения из строки формата
        SNA
         JMP PRTFND
        DCA TMP3
        TAD TMP3
        TAD NPRCNT
        SNA CLA
         JMP PRTFPC
PRTFSD, TAD TMP3        / Стандартный вывод символа
        TAD NLFF        / Проверка на LF
        SZA CLA
         JMP NOTLFF
        TAD PCRF        / Вывод CR перед LF
        TSF
         JMP .-1
        TLS
        CLA CLL

NOTLFF, TAD TMP3        / Выводится не LF
        TSF
         JMP .-1
        TLS
        CLA CLL
        JMP PRTFL
PRTFPC, TAD I TMP2      / Обработка %
        TAD DTD
        SNA
         JMP PRTFD
        TAD DTPRCT
        SNA CLA
         JMP PRTFPT
        JMP PRTFL
PRTFD,  TAD I TMP1      / Вывод числа (d)
        DCA TMP3
        TAD TMP1
        TAD P3
        DCA TMP1
        
        / Вывод минуса у отрицательного числа
        TAD TMP3
        SMA
         JMP PRTFPS
        CIA
        DCA TMP3
        TAD PMINUS
        TSF
         JMP .-1
        TLS

        / Вывод 3 цифр (единиц, десятков и сотен)
PRTFPS, CLA CLL
        TAD P1000       / Сохранение 1000
        DCA DVSR        /    в делителе
        TAD N3          / Сохранение счётчика
        DCA NUMCNT
        DCA NDSKP

DLOOP,  TAD TMP3
        MQL DVI         / Деление результата
DVSR,   0000
        DCA TMP3        / Сохранение остатка
        CLA MQA         / Получение частного
        DCA NUMTMP

        TAD NUMTMP
        SZA CLA
         JMP PRNT
        TAD NDSKP
        SZA CLA
         JMP PRNT
        JMP DLEND

PRNT,   TAD NUMTMP
        TAD DIGGEN      / Создание кода символа частного
        TSF             / Вывод цифры в терминал
         JMP .-1
        TLS
        CLA

DLEND,  ISZ NUMCNT
         JMP .+2
        JMP DLPEXT

        / Деление делителя на 10
        TAD DVSR
        MQL DVI
        0012            / 10
        CLA MQA
        DCA DVSR

        JMP DLOOP

        / Вывод единиц
DLPEXT, TAD TMP3
	TAD DIGGEN
        DCA TMP3
        JMP PRTFSD

PRTFPT, TAD PPRCNT      / Вывод %
        DCA TMP3
        JMP PRTFSD
PRTFND, TAD SP2         / Выход из цикла
        DCA SP1
        ISZ SP2
        TAD I SP2
        DCA SP2
        JMP I f01

NUMTMP, 0
NDSKP,  0               / Если 0, пропускать цифру
NUMCNT, 0
PCRF,   0015            / CR
PPRCNT, 0045            / '%'
PMINUS, 0055            / '-'
NPRCNT, 7733            / -'%'
NLFF,   7766            / -LF
DTD,    7634            / Определение 'd' 
DTPRCT, 0077            / Определение '%' полсе 'd'
P6F,    6               / 6
P10,	0012		/ 10
P1000,	1750		/ 1000
DIGGEN,	0060		/ Слагаемое для получения символа цифры

*600

/ Стандартная функция puts
f00,    0
        TAD SP2
        TAD P6S
        DCA TMP2
        TAD I TMP2
        TAD N1
        DCA TMP2
PTSL,   TSF
         JMP .-1
        TAD I TMP2
        SNA
         JMP PTSEND

        / Проверка на LF
        DCA TMP3
        TAD TMP3
        TAD NLFS
        SZA CLA
         JMP NOTLFS
        TAD CRS         / Вывод CR перед LF
        TSF
         JMP .-1
        TLS
        CLA CLL

NOTLFS, TAD TMP3
        TLS
        CLA
        JMP PTSL
PTSEND, TAD CRS
        TLS
        TSF
         JMP .-1
        TAD LFFTCR
        TLS
        CLA

        TAD SP2
        DCA SP1
        ISZ SP2
        TAD I SP2
        DCA SP2

        JMP I f00
P6S,    6       / 6
CRS,    0015
LFFTCR, 7775
NLFS,   7766            / -LF

/ Пролог функции
PRLG,   0
        / Save pointer to stack registers
        TAD SP2
        IAC
        DCA TMP2
        TAD SP1
        DCA I TMP2
        / Save counter
        TAD I PRLG
        SNA
         JMP SKPPRG     / Skip if nothing to save
        DCA TMP1        / TMP1 - counter
        / Save pointer to registers for read
        TAD REGSP
        DCA TMP2        / TMP2 - pointer to registers for read
        / Registers save loop
PRLGC,  TAD I TMP2      / Read register
        DCA I SP1       / Save register to stack
        ISZ TMP1
         JMP PRLGC
        / Exit loop
SKPPRG, ISZ PRLG        / Skip arg
        JMP I PRLG      / jump back to function

/ Эпилог функции
EPLG,   0
        / Save counter
        TAD I EPLG
        SNA
         JMP SKPPLG     / Skip if nothing to restore
        DCA TMP1        / TMP1 - counter
        / Save pointer to stack registers
        TAD SP2
        IAC
        DCA TMP2
        TAD I TMP2
        DCA TMP2        / TMP2 - pointer to registers for read
        / Save pointer to registers for restore
        TAD REGSP
        DCA TMP3        / TMP2 - pointer to registers for restore
        / Restore loop
EPLGC,  TAD I TMP2      / Read stack register
        DCA I TMP3      / Save register
        ISZ TMP1
         JMP EPLGC
        / Exit loop
SKPPLG, / Restore SP1
        TAD SP2
        TAD N1
        DCA SP1
        / Restore SP2
        TAD I SP2
        DCA SP2
        / return from function
        TAD SP1
        DCA TMP2
        TAD I TMP2
        DCA TMP1
        JMP I TMP1
REGSP,  REGS-1
